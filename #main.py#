import plotly.graph_objects as go
import pandas as pd

#Чтение xlsx файла
#df = pd.read_excel(".xlsx")

'''
df = pd.read_excel("Sankey ARR.xlsx", sheet_name="1-customer_mrr_per_month-gitpod", skiprows=[0, 1, 2])

column_arrays = {}

# Iterate over each column in the DataFrame
for column in df.columns:
    # Convert the column to an array and store it in the dictionary
    column_arrays[column] = df[column].to_numpy()

print(column_arrays)

xls = pd.ExcelFile("Sankey ARR.xlsx")
print(xls.sheet_names)


fig = go.Figure(go.Sankey(
    arrangement = "snap",
    node = {
        "label": ["Узел A", "Узел B", "Узел C", "Узел D"],
        "pad": 15,
        "thickness": 20,
        "line": {"color": "black", "width": 0.5}
    },
    link = {
        "source": [0, 1, 0, 2, 3, 3],
        "target": [2, 3, 3, 3, 0, 2],
        "value": [8, 4, 2, 8, 4, 2]
    }
))

fig.update_layout(title_text="Пример диаграммы Санкея в Plotly", font_size=10)
fig.show()
'''


'''
import plotly.graph_objects as go
import pandas as pd
import numpy as np
# Read the Excel file
df = pd.read_excel("Sankey ARR.xlsx", sheet_name="1-customer_mrr_per_month-gitpod", skiprows=[0, 1])

# Replace these with your actual column names
source_column = 'Beginning ARR'
target_column = 'churn'
value_column = 'contraction'

# Concatenate the source and target columns, then get unique values
all_labels = pd.concat([df[source_column], df[target_column]]).unique()

# Create the Sankey diagram
fig = go.Figure(data=[go.Sankey(
    node=dict(
        pad=15,
        thickness=20,
        line=dict(color='black', width=0.5),
        label=all_labels
    ),
    link=dict(
        source=df[source_column].apply(lambda x: np.where(all_labels == x)[0][0]), # Indices for source
        target=df[target_column].apply(lambda x: np.where(all_labels == x)[0][0]), # Indices for target
        value=df[value_column]
    ))])

fig.update_layout(title_text="Sankey Diagram", font_size=10)
fig.show()
'''

df = pd.read_excel("Sankey ARR.xlsx", sheet_name="1-customer_mrr_per_month-gitpod", skiprows=[0, 1])

fifth_column_data = df.iloc[:, 2].to_numpy()

for item in fifth_column_data:
    print(item)

#print(fifth_column_data)

array1 = [1, 2, 3]
array2 = [4, 5, 6]
tuple_of_arrays = (array1, array2)

print(tuple_of_arrays[0])